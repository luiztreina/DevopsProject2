name: DevOps Pipeline

on:
  push:
    branches:
      - main

env:
  ECR_REPO_NAME: amazon-prime
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 123456789012
  SONAR_PROJECT_KEY: amazon-prime
  SONAR_HOST_URL: http://your-sonarqube-url:9000
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 1. Checkout Code
      uses: actions/checkout@v3

    - name: 2. Set up JDK and Node.js
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: 3. SonarQube Analysis
      env:
        SONAR_SCANNER_OPTS: "-Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} -Dsonar.sources=."
      run: |
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner.zip
        ./sonar-scanner-*/bin/sonar-scanner \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }}

    - name: 4. Wait for Quality Gate
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        sonar-token: ${{ secrets.SONAR_TOKEN }}
      env:
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

    - name: 5. Install npm packages
      run: npm install

    - name: 6. Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'trivy-report.txt'

    - name: 7. Build Docker Image
      run: |
        docker build -t $ECR_REPO_NAME .

    - name: 8. Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
        aws configure set default.region $AWS_REGION

    - name: 9. Create ECR Repo (if not exists)
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPO_NAME || \
        aws ecr create-repository --repository-name $ECR_REPO_NAME

    - name: 10. Login to ECR & Tag Image
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        docker tag $ECR_REPO_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.run_number }}
        docker tag $ECR_REPO_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest

    - name: 11. Push Image to ECR
      run: |
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.run_number }}
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest

    - name: 12. Cleanup Local Docker Images
      run: |
        docker rmi $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.run_number }}
        docker rmi $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest
        docker image prune -f
